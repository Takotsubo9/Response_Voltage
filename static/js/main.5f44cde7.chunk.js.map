{"version":3,"sources":["index.js"],"names":["InputForm","props","handleSliderChange","bind","handleInputChange","handleBlur","e","newValue","this","onValueChange","target","value","Number","className","id","gutterBottom","units","container","spacing","alignItems","item","xs","onChange","margin","onBlur","inputProps","step","min","max","type","React","Component","VoltOutput","resistance","power","deltaTime","tau","capa","dataCal","Capa","DeltaTime","data","x","y","i","push","GraphView","height","width","top","HEIGHT","orientation","title","tickTotal","left","Management","handleChange","state","setState","map","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f44cde7.chunk.js","sourcesContent":["import React from 'react';\nimport { XYPlot, LineSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis } from \"react-vis\";\nimport 'react-vis/dist/style.css';\nimport Grid from '@material-ui/core/Grid';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\nimport Typography from '@material-ui/core/Typography';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nclass InputForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSliderChange = this.handleSliderChange.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n\n\n  }\n  handleSliderChange(e, newValue) {\n    this.props.onValueChange(newValue);\n  }\n\n  handleInputChange(e) {\n    this.props.onValueChange(e.target.value === '' ? '' : Number(e.target.value));\n  }\n\n  handleBlur(e) {\n    if (e.target.value < 0) {\n      this.props.onValueChange(0);\n    } else if (e.target.value > 1000000) {\n      this.props.onValueChange(1000000);\n    }\n  };\n\n  render() {\n    const value = this.props.value;\n    return (\n      <div className=\"root\">\n        <Typography id=\"input-slider\" gutterBottom>\n          {this.props.id} [{this.props.units}]\n        </Typography>\n        <Grid container spacing={2} alignItems=\"center\">\n          <Grid item xs>\n            <Slider\n              value={value}\n              onChange={this.handleSliderChange}\n              aria-labelledby=\"input-slider\"\n            />\n          </Grid>\n          <Grid item>\n            <Input\n              className=\"input\"\n              value={value}\n              margin=\"dense\"\n              onChange={this.handleInputChange}\n              onBlur={this.handleBlur}\n              inputProps={{\n                step: 1,\n                min: 0,\n                max: 1000000,\n                type: 'number',\n                'aria-labelledby': 'input-slider',\n              }}\n            />\n          </Grid>\n        </Grid>\n      </div >\n    );\n  }\n}\n\nfunction VoltOutput(props) {\n  const resistance = props.resistance;\n  const power = props.power;\n  const deltaTime = props.deltaTime * 0.000001;\n  const capa = props.capa * 0.000001;\n  const tau = resistance * capa;\n  return <p className=\"formula\">v(t+{deltaTime}) = {1 - deltaTime / tau} * v(t) + {deltaTime * power / tau}</p>\n}\n\nfunction dataCal(resistance, Capa, power, DeltaTime) {\n  const capa = Capa * 0.000001;\n  const deltaTime = DeltaTime * 0.000001;\n  const tau = resistance * capa\n  let data = [\n    { x: 0, y: 0 }\n  ];\n  for (let i = 1; i < 101; i++) {\n    data.push({ x: deltaTime * i * 1000, y: ((1 - deltaTime / tau) * data[i - 1].y + deltaTime * power / tau) }) //x:[ms] y:[V]  xはμsからmsにするために*1000している\n  }\n  return data;\n}\n\nfunction GraphView(props) {\n  const HEIGHT = 300;\n  const WIDTH = 800;\n  return (\n    <XYPlot className=\"graph\" height={HEIGHT} width={WIDTH}>\n      <XAxis top={HEIGHT - 50} orientation=\"bottom\" title=\"[ms]\" tickTotal={10} />\n      <YAxis left={0} />\n      <LineSeries data={props.data} />\n      <VerticalGridLines />\n      <HorizontalGridLines />\n    </XYPlot>\n  )\n}\n\n\nclass Management extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      resistance: 0,\n      capa: 0,\n      power: 0,\n      deltaTime: 0\n    };\n  }\n\n  handleChange(item, newValue) {\n    this.setState((state) => {\n      return {\n        [item]: newValue\n      }\n    });\n  }\n\n\n\n  render() {\n    const arr = [\n      ['resistance', 'Ω'],\n      ['capa', 'μF'],\n      ['power', 'V'],\n      ['deltaTime', 'μs']\n    ]\n    return (\n      <div >\n        <h1 className=\"title\">Response voltage of RC series circuit v(t)</h1>\n        <GraphView\n          data={dataCal(\n            Number(this.state.resistance),\n            Number(this.state.capa),\n            Number(this.state.power),\n            Number(this.state.deltaTime)\n          )}\n        />\n        {\n          arr.map(item =>\n            <InputForm\n              onValueChange={newValue => this.handleChange(item[0], newValue)}\n              id={item[0]}\n              units={item[1]}\n              value={this.state[[item[0]]]}\n              key={item[0]}\n            />\n          )\n        }\n        < VoltOutput\n          resistance={Number(this.state.resistance)}\n          capa={Number(this.state.capa)}\n          power={Number(this.state.power)}\n          deltaTime={Number(this.state.deltaTime)}\n        />\n      </div >\n\n    )\n  }\n}\n\n\n\nReactDOM.render(\n  <Management />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}